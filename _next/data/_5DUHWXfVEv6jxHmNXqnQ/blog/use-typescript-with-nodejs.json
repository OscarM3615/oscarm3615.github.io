{"pageProps":{"post":{"slug":"use-typescript-with-nodejs","title":"Use Typescript with Node.js","description":"\nA simple guide on how to set up a Node.js and Express app using Typescript.\n\n","createdAt":"June 6, 2021","tags":["nodejs","typescript","express"],"content":"\nA simple guide on how to set up a Node.js and Express app using Typescript.\n\n---\n\n### What is Typescript?\n\nTypescript is a **typed** superset of Javascript than can help to build and manage\nlarge-scale Javascript projects. All Javascript code is also valid Typescript code.\n\n### Why should I use Typescript?\n\nSome benefits of using Typescript with Node.js applications are:\n\n- Static typing\n- Type inference\n- Define interfaces\n\n### Set up the project\n\n#### Required tools\n\n- Node.js\n- Npm or yarn (yarn will be used in this article)\n\n#### Process\n\nCreate a new directory for your project (for example, node-typescript) and open it:\n\n```bash\nmkdir node-typescript\ncd node-typescript\n```\n\nInitialise a new node project with yarn:\n\n```bash\nyarn init -y\n```\n\nInstall the required packages for the web server:\n\n```bash\nyarn add express cors morgan\n```\n\nInstall the development dependencies (including Typescript):\n\n```bash\nyarn add --dev @types/express @types/cors @types/morgan typescript nodemon ts-node\n```\n\nOpen the file `package.json` and modify the scripts section to include the following:\n\n```json\n{\n  \"scripts\": {\n    \"start\": \"node dist/index.js\",\n    \"build\": \"tsc\",\n    \"dev\": \"nodemon --config nodemon.json src/index.ts\"\n  }\n}\n```\n\nCreate a file called `nodemon.json` alongside `package.json` and put the following\nconfig:\n\n```json\n{\n  \"restartable\": \"rs\",\n  \"ignore\": [\".git\", \"node_modules/\", \"dist/\"],\n  \"watch\": [\"src/\"],\n  \"execMap\": {\n    \"ts\": \"node -r ts-node/register\"\n  },\n  \"env\": {\n    \"NODE_ENV\": \"development\"\n  },\n  \"ext\": \"js,json,ts\"\n}\n```\n\nNow create a folder called `src` and inside it create a file `index.ts` with the\nfollowing content:\n\n```typescript\nimport express from 'express';\nimport morgan from 'morgan';\nimport cors from 'cors';\n\nconst PORT = process.env.PORT || 5000; // Read port from environment variables.\n\nconst app = express();\n\n// Middleware\napp.use(cors()); // Allows our app to be used from any client.\napp.use(morgan('dev')); // Log the requests in console.\napp.use(express.json()); // Parses requests body into json.\n\n// Routes\napp.get('/', (_req, res) => {\n  res.json({\n    message: 'Hello, world!'\n  });\n});\n\n// Notify when server is ready.\napp.listen(PORT, () => {\n  console.log(`[i] Server listening at http://127.0.0.1:${PORT}...`);\n});\n```\n\nTo start the development server:\n\n```bash\nyarn run dev\n```\n\nTo build and use for production:\n\n```bash\nyarn run build\nyarn run start\n```\n\n_Using ts-node is not recommended for production for performance reasons, so we\ntranspile it to Javascript._\n\nOpening <http://localhost:5000> in the browser will result in the following:\n\n```json\n{ \"message\": \"Hello, world!\" }\n```\n\n### Simple way to set up\n\nInstead of typing the previous commands, clone the following repository:\n\n```bash\ngit clone https://github.com/OscarM3615/typescript-api-boilerplate.git\n```\n\nNow you can use the following commands:\n\n```bash\nyarn run dev # For a development server\nyarn run build # To transpile code to Javascript\nyarn run start # For a production server\n```\n"}},"__N_SSG":true}