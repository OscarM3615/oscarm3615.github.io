{"pageProps":{"post":{"slug":"build-your-own-react-hook","title":"Build your own React hook","description":"\nCreate the useLocalStorage custom hook.\n\n","createdAt":"June 30, 2021","tags":["react","typescript"],"content":"\nCreate the useLocalStorage custom hook.\n\n---\n\nReact hooks are useful to extract component logic and convert it into a reusable\nfunction to share logic between components.\n\n### How to create a hook\n\n- Hooks name must start with `use`\n- They can call another hooks\n- Have any arguments and return any value\n\n### Example: useLocalStorage\n\nDefine the hook name by creating a new function, it will receive the key and the\ninitial value:\n\n```javascript\nconst useLocalStorage = (key, initialValue) => {}\n```\n\nCurrent value can be managed by \\`useState\\`, so we need to import it:\n\n```javascript\nimport { useState } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [state, setState] = useState();\n}\n```\n\nWe need to get the value from localStorage, so we will pass a function to\n`useState` (`useState` can receive a function):\n\n```javascript\nimport { useState } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [state, setState] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  return state;\n```\n\nWith this, we are trying to get value from localStorage if it exists, if not,\nthen use the initial value.\n\n_If the value stored in localStorage is invalid, then use the initial value._\n\nWe need to return some way to update the value returned, so we can return a\nclosure function:\n\n```javascript\nimport { useState } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [state, setState] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setNewState = (newValue) => {\n    try {\n      setState(newValue);\n      window.localStorage.setItem(key, JSON.stringify(newValue));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return [state, setNewState];\n```\n\nNote that we are _stringifying_ the new value before storing it because\nlocalStorage only allows strings as values and we want our function to store any\nobject.\n\nAlso we are returning an array with the current value and the setter function\nlike `useState` does.\n\nFinally, we export the hook to import it from any component.\n\n```javascript\nexport default useLocalStorage;\n```\n\n#### Typescript version\n\nIf you are working on a Typescript React project, you can do the following\nchanges to ensure typing:\n\n```typescript\nimport { useState } from 'react';\n\nconst useLocalStorage = <T>(key: string, initialValue: T) => {\n  const [state, setState] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setNewState = (newValue: T): void => {\n    try {\n      setState(newValue);\n      window.localStorage.setItem(key, JSON.stringify(newValue));\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return [state, setNewState] as const;\n}\n\nexport default useLocalStorage;\n```\n\nThis ensures we pass always a value of the same type when passing the initial\nvalue and when passing a new value.\n"}},"__N_SSG":true}